<?php

namespace Tests\Unit;

use Illuminate\Foundation\Testing\WithoutMiddleware;
use Illuminate\Support\Facades\Hash;
use Tests\TestCase;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\DatabaseTransactions;

class AfiliadoControllerTest extends TestCase
{

    use DatabaseMigrations;
    private $token;
    public function data()
    {
        return [
            'DNI' => 45,
            'NOMBRE' => 1,
            'APELLIDO' => 1,
            'EMAIL' => 1,
            'TELEFONO' => 1,
            'CELULAR' => 1,
            'DIRECCION' => 1,
            'NACIMIENTO' => "2017-02-03",
            'NAFILIADO' => 45,
            'CUIL' => 1,
            'IDOBRASOCIAL' => 1,
            'PLAN' => 'oro',
            'id_usuario' => null,
            'familiares' => [
                [
                'nombre' => 'prueba',
                'apellido' => 'prueba2',
                'dni' => 32,
                'nacimiento' => '2017-02-09',
                'cuil' => 654654,
                'nafiliado' => 'asd651',
                ],
                [
                    'nombre' => 'prueba',
                    'apellido' => 'prueba2',
                    'dni' => 32,
                    'nacimiento' => '2017-02-09',
                    'cuil' => 654654,
                    'nafiliado' => 'asd651',
                ]
            ]

            ];
    }

    public function dataUpdate()
    {
        return ['DNI' => 2,
            'NOMBRE' => 2,
            'APELLIDO' => 2,
            'EMAIL' => 2,
            'TELEFONO' => 2,
            'CELULAR' => 2,
            'DIRECCION' => 2,
            'NACIMIENTO' => "2018-02-03",
            'NAFILIADO' => 2,
            'CUIL' => 2,
            'IDOBRASOCIAL' => 1,
            'PLAN' => 'oro',
            'familiares' => [
                [
                    'nombre' => 'pruebaup',
                    'apellido' => 'prueba2up',
                    'dni' => 323,
                    'nacimiento' => '2017-02-10',
                    'cuil' => 6546545,
                    'nafiliado' => 'asd65154',
                ],
                [
                    'nombre' => 'pruebaup',
                    'apellido' => 'prueba2up',
                    'dni' => 3235,
                    'nacimiento' => '2017-02-11',
                    'cuil' => 654654516,
                    'nafiliado' => 'asduiu651',
                ]
            ]
        ];
    }

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->seed("SecuritySeed");
        $data= array("name" => "1", "password" => "1");
        $response = $this->json('POST','login', $data);
        $this->token = $response->json()['data']['token'];

    }

    public function testUpdate()
    {

        $data = $this->dataUpdate();
        $response = $this->post("afiliado", $this->data(), ['Authorization' => 'Bearer '.$this->token]);

        $response2 = $this->put("afiliado/1", $this->dataUpdate(), ['Authorization' => 'Bearer '.$this->token]);
        $dataUsuario = array("name" => $this->dataUpdate()['DNI'], "email" => $this->dataUpdate()['EMAIL'], 'id_perfil' => 1);

        $familiares = $data['familiares'];
        unset($data['familiares']);
        $this->assertDatabaseHas('Usuarios', $dataUsuario);
        $this->assertDatabaseHas('Afiliados', $data);

        $this->assertDatabaseHas('familiares', $familiares[0]);
        $this->assertDatabaseHas('familiares', $familiares[1]);
    }

    public function testPost()
    {
        $data = $this->data();
        $response = $this->post("afiliado", $data, ['Authorization' => 'Bearer '.$this->token]);
        $dataUsuario = array("name" => $data['DNI'], "email" => $data['EMAIL'], 'id_perfil' => 1);
        $familiares = $data['familiares'];
        unset($data['familiares']);
        $data['id_usuario'] = 3; // va el 3 por la inicializacion de los datos para testear en la base
        $this->assertDatabaseHas('Usuarios', $dataUsuario);
        $this->assertDatabaseHas('Afiliados', $data);

        $this->assertDatabaseHas('familiares', $familiares[0]);
        $this->assertDatabaseHas('familiares', $familiares[1]);
    }


}
