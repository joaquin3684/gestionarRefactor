<?php

namespace Tests\Unit;

use Carbon\Carbon;
use Tests\TestCase;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\DatabaseTransactions;

class SolicitudControllerTest extends TestCase
{
    /**
     * A basic test example.
     *
     * @return void
     */
    use DatabaseMigrations;
    private $token;

    public function dataUpdate()
    {
        return [
            'FECHAS' => '2017-02-04',
            'DNISOLICITANTE' => 2,
            'IDAFILIADO' => 3,
            'IDCLIMED' => 2,
            'ESPECIALIDAD' => 2,

        ];
    }

    public function dataStore()
    {
        return [
            'FECHAS' => Carbon::today()->toDateString(),
            'DNISOLICITANTE' => 1,
            'IDAFILIADO' => 1,
            'IDCLIMED' => 1,
            'ESPECIALIDAD' => 1,

        ];
    }


    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->seed("SecuritySeed");
        $data= array("name" => "1", "password" => "1");
        $response = $this->json('POST','login', $data);
        $this->token = $response->json()['data']['token'];
        factory(\App\Especialidad::class)->create();
        factory(\App\Especialidad::class)->create();
        factory(\App\Climed::class)->create();
        factory(\App\Climed::class)->create();
    }


    public function testCreate()
    {
        $data = $this->dataStore();
        $response = $this->post('solicitud', $data, ['Authorization' => 'Bearer '.$this->token]);
        
        $this->assertDatabaseHas('Solicitudes', $data);
    }

    public function testUpdate()
    {
        $data = $this->dataStore();
        $response = $this->post('solicitud', $data, ['Authorization' => 'Bearer '.$this->token]);

        $data = $this->dataUpdate();
        $response = $this->put('solicitud/1', $data, ['Authorization' => 'Bearer '.$this->token]);

        $data['FECHAMODIFICACION'] = Carbon::today()->toDateString();
        $this->assertDatabaseHas('Solicitudes', $data);
    }

    public function testAutorizar()
    {
        $data = $this->dataStore();
        $response = $this->post('solicitud', $data, ['Authorization' => 'Bearer '.$this->token]);
        $data = array('id' => 1, 'MOTIVO' => 'prueba');

        $response = $this->post('solicitud/autorizar', $data, ['Authorization' => 'Bearer '.$this->token]);

        $this->assertDatabaseHas('Solicitudes', ['IDS' => 1, 'ESTADO' => 'Pendiente', 'REVISADO' => 1]);
    }

    public function testRechazar()
    {
        $data = $this->dataStore();
        $response = $this->post('solicitud', $data, ['Authorization' => 'Bearer '.$this->token]);
        $data = array('id' => 1, 'MOTIVO' => 'prueba');

        $response = $this->post('solicitud/rechazar', $data, ['Authorization' => 'Bearer '.$this->token]);

        $this->assertDatabaseHas('Solicitudes', ['IDS' => 1, 'ESTADO' => 'Rechazado', 'REVISADO' => 1, 'MOTIVO' => $data['MOTIVO']]);
    }

    /**
     * @expectedException App\Exceptions\NoTieneAccesoAEstaObraSocialException
     */
    public function testAutorizarSinPermisoAObraSocial()
    {
        $data = $this->dataStore();
        $af = factory(\App\Afiliado::class)->create(['IDOBRASOCIAL' => 3, 'DNI' => 47]);
        $sol = factory(\App\Solicitud::class)->create(['DNISOLICITANTE' => $af->DNI, 'IDCLIMED' => $data['IDCLIMED'], 'ESPECIALIDAD' => $data['ESPECIALIDAD'] ]);
        $data['DNISOLICITANTE'] = $af->DNI;
        $data['id'] = $sol->IDS;

        $response = $this->post('solicitud/autorizar', $data, ['Authorization' => 'Bearer '.$this->token]);
    }


    /**
     * @expectedException App\Exceptions\NoTieneAccesoAEstaObraSocialException
     */
    public function testRechazarSinPermisoObraSocial()
    {
        $data = $this->dataStore();
        $af = factory(\App\Afiliado::class)->create(['IDOBRASOCIAL' => 3, 'DNI' => 47]);
        $sol = factory(\App\Solicitud::class)->create(['DNISOLICITANTE' => $af->DNI, 'IDCLIMED' => $data['IDCLIMED'], 'ESPECIALIDAD' => $data['ESPECIALIDAD'] ]);
        $data['DNISOLICITANTE'] = $af->DNI;
        $data['id'] = $sol->IDS;
        $data = array('id' => 1, 'MOTIVO' => 'prueba');

        $response = $this->post('solicitud/rechazar', $data, ['Authorization' => 'Bearer '.$this->token]);

    }


}
